{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/qlpic101.service\";\nimport * as i2 from \"@angular/common\";\nfunction ExamComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const q_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", q_r1, \" \");\n  }\n}\nexport class ExamComponent {\n  constructor(ql101Mc) {\n    this.ql101Mc = ql101Mc;\n    this.ql101all = [];\n    this.ql101mcall = [];\n    this.ql101scall = [];\n    this.ql101fiall = [];\n    this.qfound = [];\n    this.answered = [];\n    this.wronganswered = [];\n    this.qanzahl = -1;\n    this.qchkfalse = -1;\n    this.qanwered = false;\n    this.showanswers = false;\n    this.queryNrAnswersShow = -1;\n    this.currentQnr = -1;\n    // maxexamwrong in %\n    this.maxexamwrong = 20;\n    this.examresult = false;\n    this.showResultQuestions = false;\n    this.stats = {\n      qmaxnumber: 0,\n      qanswered: 0,\n      qwrong: 0,\n      qcorrect: 0,\n      qnotanswered: 0\n    };\n    this.sayi = 3;\n    this.currentQnr = 0;\n    this.query = this.ql101mcall[this.currentQnr];\n    this.gotolearnmode = false;\n    this.examwrong = 0;\n  }\n  ngOnInit() {\n    this.ql101mcall = this.ql101Mc.getallMc();\n    // this.ql101Mc.initGivenAnswers()\n    this.statistic = this.calcStatsMc();\n  }\n  shuffleAll() {\n    console.log('in shuffle');\n  }\n  nullStats() {\n    this.stats.qmaxnumber = 0;\n    this.stats.qanswered = 0;\n    this.stats.qwrong = 0;\n    this.stats.qcorrect = 0;\n    this.stats.qnotanswered = 0;\n  }\n  resetStatsAll() {\n    this.nullStats();\n    return this.calcStatsAll();\n  }\n  resetStatsMc() {\n    this.nullStats();\n    return this.calcStatsMc();\n  }\n  resetStatsSc() {\n    this.nullStats();\n    return this.calcStatsSc();\n  }\n  resetStatsFi() {\n    this.nullStats();\n    return this.calcStatsFi();\n  }\n  calcStatsAll() {\n    // numbers of questions\n    this.stats.qmaxnumber = this.ql101all.length;\n    // console.log('Anzahl Fragen: ', this.stats.qmaxnumber)\n    // answered?\n    let mcs = this.ql101all.filter(q => q.qtyp === 'mc').filter(q => q.qanswers.findIndex(a => a.givenans === true) > -1).length;\n    let scs = this.ql101all.filter(q => q.qtyp === 'sc').filter(q => q.qanswers.findIndex(a => a.givenans === true) > -1).length;\n    let fis = this.ql101all.filter(q => q.qtyp === 'fi').filter(q => q.qgiventxt != '').length;\n    this.stats.qanswered = mcs + scs + fis;\n    console.log(mcs, scs, fis);\n    // // not answered\n    this.stats.qnotanswered = this.stats.qmaxnumber - mcs - scs - fis;\n    // // correct answered\n    // mcs not correct\n    let notcorrectmcs = this.ql101all.filter(q => q.qtyp === 'mc').filter(q => q.qanswers.findIndex(a => a.correct != a.givenans) > -1).length;\n    console.log('mcs n c:', notcorrectmcs);\n    // scs not correct\n    let notcorrectscs = this.ql101all.filter(q => q.qtyp === 'sc').filter(q => q.qanswers.findIndex(a => a.correct != a.givenans) > -1).length;\n    console.log('scs n c:', notcorrectscs);\n    // fis not correct\n    let notcorrectfis = this.ql101all.filter(q => q.qtyp === 'fi').filter(q => q.qanswers.findIndex(a => a.txt.find(t => t === q.qgiventxt))).length;\n    console.log('fis n c:', notcorrectfis);\n    this.stats.qcorrect = this.stats.qmaxnumber - notcorrectmcs - notcorrectscs - notcorrectfis;\n    // // wrong answered\n    this.stats.qwrong = this.stats.qnotanswered - (notcorrectmcs + notcorrectscs + notcorrectfis);\n    return this.stats;\n  }\n  calcStatsMc() {\n    // numbers of questions\n    this.stats.qmaxnumber = this.ql101mcall.length;\n    // console.log('Anzahl Fragen: ', this.stats.qmaxnumber)\n    // answered?\n    if (this.ql101mcall.findIndex(q => q.qanswers.findIndex(a => a.givenans === true)) > 0) {\n      this.stats.qanswered = this.ql101mcall.filter(q => q.qanswers.findIndex(a => a.givenans === true) != -1).length;\n    }\n    // not answered\n    this.stats.qnotanswered = this.stats.qmaxnumber - this.stats.qanswered;\n    // correct answered\n    // 1. finde beantwortete fragen\n    this.answered = this.ql101mcall.filter(q => q.qanswers.findIndex(a => a.givenans === true) > -1);\n    // 2. finde fragen mit nicht 'correct != givenans' => falsch beantwortet sind\n    this.wronganswered = this.answered.filter(q => q.qanswers.findIndex(a => a.correct != a.givenans) > -1);\n    this.stats.qcorrect = this.answered.length - this.wronganswered.length;\n    // wrong answered\n    this.stats.qwrong = this.wronganswered.length;\n    return this.stats;\n  }\n  calcStatsSc() {\n    // numbers of questions\n    this.stats.qmaxnumber = this.ql101scall.length;\n    // console.log('Anzahl Fragen: ', this.stats.qmaxnumber)\n    // answered?\n    if (this.ql101scall.findIndex(q => q.qanswers.findIndex(a => a.givenans === true)) > 0) {\n      this.stats.qanswered = this.ql101scall.filter(q => q.qanswers.findIndex(a => a.givenans === true) != -1).length;\n    }\n    // not answered\n    this.stats.qnotanswered = this.stats.qmaxnumber - this.stats.qanswered;\n    // correct answered\n    // 1. finde beantwortete fragen\n    this.answered = this.ql101scall.filter(q => q.qanswers.findIndex(a => a.givenans === true) > -1);\n    // 2. finde fragen mit nicht 'correct != givenans' => falsch beantwortet sind\n    this.wronganswered = this.answered.filter(q => q.qanswers.findIndex(a => a.correct != a.givenans) > -1);\n    this.stats.qcorrect = this.answered.length - this.wronganswered.length;\n    // wrong answered\n    this.stats.qwrong = this.wronganswered.length;\n    return this.stats;\n  }\n  calcStatsFi() {\n    // nullStats(){\n    //   this.stats.qmaxnumber = 0;\n    //   this.stats.qanswered = 0;\n    //   this.stats.qwrong = 0;\n    //   this.stats.qcorrect = 0;\n    //   this.stats.qnotanswered = 0;\n    // }\n    // numbers of questions\n    this.stats.qmaxnumber = this.ql101fiall.length;\n    // console.log('Anzahl Fragen: ', this.stats.qmaxnumber)\n    // answered?\n    // if (this.ql101fiall.findIndex(q => q.qgiventxt != '')) {\n    this.stats.qanswered = this.ql101fiall.filter(q => q.qgiventxt != '').length;\n    // }\n    // not answered\n    this.stats.qnotanswered = this.stats.qmaxnumber - this.stats.qanswered;\n    // correct answered\n    this.stats.qcorrect = this.ql101fiall.filter(q => q.qanswers.find(a => a.txt.find(t => t === q.qgiventxt))).length;\n    // this.stats.qcorrect = this.answered.length - this.wronganswered.length\n    // wrong answered\n    this.stats.qwrong = this.stats.qanswered - this.stats.qcorrect;\n    return this.stats;\n  }\n  resetStats() {\n    this.statistic = this.resetStatsMc();\n    this.firstQuery();\n    this.gotolearnmode = false;\n    this.examwrong = 0;\n  }\n  resetAnswers() {\n    // reset 'givenanswer's of all questions\n    this.ql101mcall.map(q => q.qanswers.map(a => a.givenans = false));\n    this.resetStats();\n    this.firstQuery();\n    this.examwrong = 0;\n  }\n  refreshStats() {\n    this.statistic = this.calcStatsMc();\n  }\n  firstQuery() {\n    this.currentQnr = 0;\n    this.query = this.ql101mcall[this.currentQnr];\n    this.showanswers = false;\n    this.refreshStats();\n  }\n  prevQuery() {\n    if (0 < this.currentQnr) {\n      this.currentQnr--;\n      this.query = this.ql101mcall[this.currentQnr];\n    }\n    this.showanswers = false;\n    this.refreshStats();\n  }\n  nextQuery() {\n    if (this.checkQueryMcAnswered()) {\n      this.gotolearnmode = false;\n      if (!this.checkQueryMcAnsweredCorrect()) {\n        this.examwrong++;\n        console.log('Learn wrong: ', this.examwrong);\n        console.log(this.examwrong, this.ql101mcall.length, this.maxexamwrong);\n        if (100 * (this.examwrong / this.ql101mcall.length) > this.maxexamwrong) {\n          this.gotolearnmode = true;\n        } else {\n          this.setNextQuestion();\n        }\n      } else {\n        this.setNextQuestion();\n      }\n    } else {\n      this.setNextQuestion();\n    }\n  }\n  // nextQuery() {\n  //   // ------------------------------------------------------\n  //   // check if current question answered and correct -> next\n  //   //   else update examwrong counter\n  //   // answered?\n  //   if (this.checkQueryMcAnswered()) {\n  //     this.gotolearnmode = false\n  //     if (!this.checkQueryMcAnsweredCorrect()) {\n  //       // answered and false -> PopUp and prev question\n  //       // examwrong + 1 (max 7)\n  //       this.examwrong++\n  //       // reset answers of current query - not in exam mode\n  //       // this.query.qanswers.map(a => a.givenans = false)\n  //       // back one query or to first query\n  //       // this.prevQuery()\n  //       this.refreshStats()\n  //       console.log('Learn wrong: ', this.examwrong)\n  //       console.log(this.examwrong,this.ql101mcall.length,this.maxexamwrong)\n  //       if ((100 * (this.examwrong / this.ql101mcall.length)) > this.maxexamwrong) {\n  //         // x% wrong, this is bad :( - popup and go to learn mode\n  //         this.gotolearnmode = true\n  //       }\n  //       // this.setNextQuestion()\n  //     } else { // answered and true\n  //       // to next question\n  //       // this.setNextQuestion()\n  //       // }\n  //     }\n  //   } else {\n  //     // not answered -> next question\n  //   }\n  //   this.setNextQuestion()\n  //   // console.log('curr q: ', this.currentQnr)\n  // }\n  setNextQuestion() {\n    if (this.currentQnr < this.ql101mcall.length - 1) {\n      this.currentQnr++;\n      this.query = this.ql101mcall[this.currentQnr];\n      console.log(this.currentQnr, this.query);\n    }\n    this.showanswers = false;\n    this.refreshStats();\n  }\n  lastQuery() {\n    this.currentQnr = this.ql101mcall.length - 1;\n    this.query = this.ql101mcall[this.currentQnr];\n    this.showanswers = false;\n    this.refreshStats();\n  }\n  toggleAnswers(qid) {\n    if (this.queryNrAnswersShow != qid) {\n      this.queryNrAnswersShow = qid;\n      this.showanswers = true;\n    } else {\n      this.showanswers = !this.showanswers;\n    }\n    this.refreshStats();\n  }\n  toggleGivenAnswer(ansind) {\n    this.query.qanswers[ansind].givenans = !this.query.qanswers[ansind].givenans;\n    this.refreshStats();\n  }\n  checkQueryMcAnswered() {\n    // answered? (is one answer given 'true')\n    if (this.query.qanswers.find(a => a.givenans === true)) {\n      console.log('answered');\n      return true;\n    } else {\n      // not answered\n      console.log('not answered');\n      return false;\n    }\n  }\n  checkQueryMcAnsweredCorrect() {\n    // correct answered? (are all givenans equal correct)\n    if (this.query.qanswers.find(a => a.givenans != a.correct)) {\n      // answered false\n      console.log('answered false');\n      return false;\n    } else {\n      console.log('answered true');\n      return true;\n    }\n  }\n  examEnd() {\n    this.examresult = true;\n    this.showanswers = true;\n    this.refreshStats();\n  }\n  examQuestions() {\n    this.showResultQuestions = true;\n  }\n}\n_class = ExamComponent;\n_class.ɵfac = function ExamComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.Qlpic101Service));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-exam\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"]],\n  template: function ExamComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtemplate(1, ExamComponent_div_1_Template, 2, 1, \"div\", 0);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ql101all);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","q_r1","ExamComponent","constructor","ql101Mc","ql101all","ql101mcall","ql101scall","ql101fiall","qfound","answered","wronganswered","qanzahl","qchkfalse","qanwered","showanswers","queryNrAnswersShow","currentQnr","maxexamwrong","examresult","showResultQuestions","stats","qmaxnumber","qanswered","qwrong","qcorrect","qnotanswered","sayi","query","gotolearnmode","examwrong","ngOnInit","getallMc","statistic","calcStatsMc","shuffleAll","console","log","nullStats","resetStatsAll","calcStatsAll","resetStatsMc","resetStatsSc","calcStatsSc","resetStatsFi","calcStatsFi","length","mcs","filter","q","qtyp","qanswers","findIndex","a","givenans","scs","fis","qgiventxt","notcorrectmcs","correct","notcorrectscs","notcorrectfis","txt","find","t","resetStats","firstQuery","resetAnswers","map","refreshStats","prevQuery","nextQuery","checkQueryMcAnswered","checkQueryMcAnsweredCorrect","setNextQuestion","lastQuery","toggleAnswers","qid","toggleGivenAnswer","ansind","examEnd","examQuestions","ɵɵdirectiveInject","i1","Qlpic101Service","selectors","decls","vars","consts","template","ExamComponent_Template","rf","ctx","ɵɵtemplate","ExamComponent_div_1_Template","ɵɵproperty"],"sources":["/home/semus/Schreibtisch/2108/src/app/exam/exam.component.ts","/home/semus/Schreibtisch/2108/src/app/exam/exam.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { McQuery } from '../interfaces/mc-query';\nimport { Statistics } from '../interfaces/statistics';\nimport { Qlpic101Service } from '../services/qlpic101.service';\n// import { StatsService } from '../services/stats.service';\nimport { ScQuery } from '../interfaces/sc-query';\nimport { FiQuery } from '../interfaces/fi-query';\nimport { LceQuery } from '../interfaces/lcequery';\n@Component({\n  selector: 'app-exam',\n  templateUrl: './exam.component.html',\n  styleUrls: ['./exam.component.css']\n})\nexport class ExamComponent implements OnInit {\n  ql101all: LceQuery[] = []\n  ql101mcall: McQuery[] = []\n  ql101scall: ScQuery[] = []\n  ql101fiall: FiQuery[] = []\n\n  qfound: LceQuery[] = []\n  answered: LceQuery[] = []\n  wronganswered: LceQuery[] = []\n\n  stats: Statistics;\n\n  qanzahl: number = -1;\n  qchkfalse: number = -1;\n  qanwered: boolean = false;\n\n  showanswers = false\n  queryNrAnswersShow = -1\n\n  sayi: number;\n\n  query: McQuery;\n  currentQnr = -1\n\n  statistic!: Statistics;\n  gotolearnmode: boolean\n\n  // maxexamwrong in %\n  maxexamwrong = 20\n  // examwrong number of wrong questions\n  examwrong: number\n\n  examresult = false\n  showResultQuestions = false\n\n  constructor(\n    private ql101Mc: Qlpic101Service,\n    \n  ) {\n    this.stats = {\n      qmaxnumber: 0,\n      qanswered: 0,\n      qwrong: 0,\n      qcorrect: 0,\n      qnotanswered: 0\n    }\n    this.sayi=3\n   \n\n    this.currentQnr = 0\n    this.query = this.ql101mcall[this.currentQnr]\n    this.gotolearnmode = false\n    this.examwrong = 0\n  }\n  ngOnInit(): void {\n    this.ql101mcall = this.ql101Mc.getallMc()\n    // this.ql101Mc.initGivenAnswers()\n\n    this.statistic = this.calcStatsMc()\n  }\n\n  shuffleAll() {\n    console.log('in shuffle')\n  }\n\n  nullStats() {\n    this.stats.qmaxnumber = 0;\n    this.stats.qanswered = 0;\n    this.stats.qwrong = 0;\n    this.stats.qcorrect = 0;\n    this.stats.qnotanswered = 0;\n  }\n\n  resetStatsAll() {\n    this.nullStats()\n    return this.calcStatsAll();\n  }\n\n  resetStatsMc() {\n    this.nullStats()\n    return this.calcStatsMc();\n  }\n\n  resetStatsSc() {\n    this.nullStats()\n    return this.calcStatsSc();\n  }\n\n  resetStatsFi() {\n    this.nullStats()\n    return this.calcStatsFi();\n  }\n\n  calcStatsAll() {\n    // numbers of questions\n    this.stats.qmaxnumber = this.ql101all.length\n    // console.log('Anzahl Fragen: ', this.stats.qmaxnumber)\n    // answered?\n    let mcs =\n      this.ql101all.filter(q => q.qtyp === 'mc').\n        filter(q => q.qanswers.findIndex(a => a.givenans === true) > -1).length\n\n    let scs =\n      this.ql101all.filter(q => q.qtyp === 'sc')\n        .filter(q => q.qanswers.findIndex(a => a.givenans === true) > -1).length\n\n    let fis =\n      this.ql101all.filter(q => q.qtyp === 'fi').filter(q => q.qgiventxt != '').length\n\n    this.stats.qanswered = mcs + scs + fis\n    console.log(mcs, scs, fis)\n\n    // // not answered\n    this.stats.qnotanswered = this.stats.qmaxnumber - mcs - scs - fis\n\n    // // correct answered\n    // mcs not correct\n    let notcorrectmcs = this.ql101all.filter(q => q.qtyp === 'mc')\n      .filter(q => q.qanswers.findIndex(a => a.correct != a.givenans) > -1).length\n    console.log('mcs n c:', notcorrectmcs)\n    // scs not correct\n    let notcorrectscs = this.ql101all.filter(q => q.qtyp === 'sc')\n      .filter(q => q.qanswers.findIndex(a => a.correct != a.givenans) > -1).length\n    console.log('scs n c:', notcorrectscs)\n    // fis not correct\n    let notcorrectfis = this.ql101all.filter(q => q.qtyp === 'fi')\n      .filter(q => q.qanswers.findIndex(a => a.txt.find(t => t === q.qgiventxt))).length\n    console.log('fis n c:', notcorrectfis)\n\n    this.stats.qcorrect = this.stats.qmaxnumber - notcorrectmcs - notcorrectscs - notcorrectfis\n    // // wrong answered\n    this.stats.qwrong = this.stats.qnotanswered - (notcorrectmcs + notcorrectscs + notcorrectfis)\n\n    return this.stats;\n  }\n\n  calcStatsMc() {\n    // numbers of questions\n    this.stats.qmaxnumber = this.ql101mcall.length\n    // console.log('Anzahl Fragen: ', this.stats.qmaxnumber)\n    // answered?\n    if (this.ql101mcall.findIndex(q => q.qanswers.findIndex(a => a.givenans === true))\n      > 0) {\n      this.stats.qanswered = this.ql101mcall.filter(q => q.qanswers.findIndex(\n        a => a.givenans === true) != -1).length\n    }\n    // not answered\n    this.stats.qnotanswered = this.stats.qmaxnumber - this.stats.qanswered;\n    // correct answered\n    // 1. finde beantwortete fragen\n    this.answered = this.ql101mcall.filter(q => q.qanswers.findIndex(a => a.givenans === true) > -1)\n    // 2. finde fragen mit nicht 'correct != givenans' => falsch beantwortet sind\n    this.wronganswered = this.answered.filter(\n      q => q.qanswers.findIndex(\n        a => a.correct != a.givenans) > -1)\n    this.stats.qcorrect = this.answered.length - this.wronganswered.length\n    // wrong answered\n    this.stats.qwrong = this.wronganswered.length\n\n    return this.stats;\n  }\n\n  calcStatsSc() {\n    // numbers of questions\n    this.stats.qmaxnumber = this.ql101scall.length\n    // console.log('Anzahl Fragen: ', this.stats.qmaxnumber)\n    // answered?\n    if (this.ql101scall.findIndex(q => q.qanswers.findIndex(a => a.givenans === true))\n      > 0) {\n      this.stats.qanswered = this.ql101scall.filter(q => q.qanswers.findIndex(\n        a => a.givenans === true) != -1).length\n    }\n    // not answered\n    this.stats.qnotanswered = this.stats.qmaxnumber - this.stats.qanswered;\n\n    // correct answered\n    // 1. finde beantwortete fragen\n    this.answered = this.ql101scall.filter(q => q.qanswers.findIndex(a => a.givenans === true) > -1)\n    // 2. finde fragen mit nicht 'correct != givenans' => falsch beantwortet sind\n    this.wronganswered = this.answered.filter(\n      q => q.qanswers.findIndex(\n        a => a.correct != a.givenans) > -1)\n    this.stats.qcorrect = this.answered.length - this.wronganswered.length\n    // wrong answered\n    this.stats.qwrong = this.wronganswered.length\n    return this.stats;\n  }\n\n  calcStatsFi() {\n    // nullStats(){\n    //   this.stats.qmaxnumber = 0;\n    //   this.stats.qanswered = 0;\n    //   this.stats.qwrong = 0;\n    //   this.stats.qcorrect = 0;\n    //   this.stats.qnotanswered = 0;\n    // }\n    // numbers of questions\n    this.stats.qmaxnumber = this.ql101fiall.length\n    // console.log('Anzahl Fragen: ', this.stats.qmaxnumber)\n    // answered?\n    // if (this.ql101fiall.findIndex(q => q.qgiventxt != '')) {\n    this.stats.qanswered = this.ql101fiall.filter(q => q.qgiventxt != '').length\n    // }\n    // not answered\n    this.stats.qnotanswered = this.stats.qmaxnumber - this.stats.qanswered;\n    // correct answered\n    this.stats.qcorrect = this.ql101fiall.filter(\n      q => q.qanswers.find(\n        a => a.txt.find(t => t === q.qgiventxt))).length\n    // this.stats.qcorrect = this.answered.length - this.wronganswered.length\n    // wrong answered\n    this.stats.qwrong = this.stats.qanswered - this.stats.qcorrect\n    return this.stats;\n  }\n\n\n  resetStats() {\n    this.statistic = this.resetStatsMc()\n    this.firstQuery()\n    this.gotolearnmode = false\n    this.examwrong = 0\n  }\n\n  resetAnswers() {\n    // reset 'givenanswer's of all questions\n    this.ql101mcall.map(q => q.qanswers.map(a => a.givenans = false))\n    this.resetStats()\n    this.firstQuery()\n    this.examwrong = 0\n  }\n\n  refreshStats() {\n    this.statistic = this.calcStatsMc()\n  }\n\n  firstQuery() {\n    this.currentQnr = 0\n    this.query = this.ql101mcall[this.currentQnr]\n    this.showanswers = false\n    this.refreshStats()\n  }\n\n  prevQuery() {\n    if (0 < this.currentQnr) {\n      this.currentQnr--\n      this.query = this.ql101mcall[this.currentQnr]\n    }\n    this.showanswers = false\n    this.refreshStats()\n  }\n  nextQuery() {\n    if (this.checkQueryMcAnswered()) {\n      this.gotolearnmode = false;\n      if (!this.checkQueryMcAnsweredCorrect()) {\n        this.examwrong++;\n        console.log('Learn wrong: ', this.examwrong);\n        console.log(this.examwrong, this.ql101mcall.length, this.maxexamwrong);\n        if ((100 * (this.examwrong / this.ql101mcall.length)) > this.maxexamwrong) {\n          this.gotolearnmode = true;\n        } else {\n          this.setNextQuestion();\n        }\n      } else {\n        this.setNextQuestion();\n      }\n    } else {\n      this.setNextQuestion();\n    }\n  }\n\n  // nextQuery() {\n  //   // ------------------------------------------------------\n  //   // check if current question answered and correct -> next\n  //   //   else update examwrong counter\n  //   // answered?\n  //   if (this.checkQueryMcAnswered()) {\n  //     this.gotolearnmode = false\n  //     if (!this.checkQueryMcAnsweredCorrect()) {\n  //       // answered and false -> PopUp and prev question\n  //       // examwrong + 1 (max 7)\n  //       this.examwrong++\n  //       // reset answers of current query - not in exam mode\n  //       // this.query.qanswers.map(a => a.givenans = false)\n  //       // back one query or to first query\n  //       // this.prevQuery()\n  //       this.refreshStats()\n  //       console.log('Learn wrong: ', this.examwrong)\n  //       console.log(this.examwrong,this.ql101mcall.length,this.maxexamwrong)\n  //       if ((100 * (this.examwrong / this.ql101mcall.length)) > this.maxexamwrong) {\n  //         // x% wrong, this is bad :( - popup and go to learn mode\n  //         this.gotolearnmode = true\n  //       }\n  //       // this.setNextQuestion()\n  //     } else { // answered and true\n  //       // to next question\n  //       // this.setNextQuestion()\n  //       // }\n  //     }\n  //   } else {\n  //     // not answered -> next question\n  //   }\n  //   this.setNextQuestion()\n  //   // console.log('curr q: ', this.currentQnr)\n  // }\n\n  setNextQuestion() {\n    if (this.currentQnr < this.ql101mcall.length - 1) {\n      this.currentQnr++\n      this.query = this.ql101mcall[this.currentQnr]\n      console.log(this.currentQnr, this.query)\n    }\n    this.showanswers = false\n    this.refreshStats()\n  }\n\n  lastQuery() {\n    this.currentQnr = this.ql101mcall.length - 1\n    this.query = this.ql101mcall[this.currentQnr]\n    this.showanswers = false\n    this.refreshStats()\n  }\n\n  toggleAnswers(qid: number): void {\n    if (this.queryNrAnswersShow != qid) {\n      this.queryNrAnswersShow = qid;\n      this.showanswers = true\n    } else {\n      this.showanswers = !this.showanswers\n    }\n    this.refreshStats()\n  }\n\n  toggleGivenAnswer(ansind: number) {\n    this.query.qanswers[ansind].givenans = !this.query.qanswers[ansind].givenans\n    this.refreshStats()\n  }\n\n  checkQueryMcAnswered() {\n    // answered? (is one answer given 'true')\n    if (this.query.qanswers.find(a => a.givenans === true)) {\n      console.log('answered')\n      return true\n    } else {\n      // not answered\n      console.log('not answered')\n      return false\n    }\n  }\n\n  checkQueryMcAnsweredCorrect() {\n    // correct answered? (are all givenans equal correct)\n    if (this.query.qanswers.find(a => a.givenans != a.correct)) {\n      // answered false\n      console.log('answered false')\n      return false\n    } else {\n      console.log('answered true')\n      return true\n    }\n  }\n  examEnd() {\n    this.examresult = true\n    this.showanswers  = true\n    this.refreshStats()\n\n  }\n  examQuestions() {\n    this.showResultQuestions=true\n  }\n  \n}\n","<h1>\n  <div *ngFor=\"let q of ql101all\">\n        {{q}}\n  </div>\n</h1>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}